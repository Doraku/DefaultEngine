<Border
    x:Class="DefaultEngine.Editor.Internal.Plugins.ShellPlugin.Views.ShellView"
    x:DataType="viewmodels:ShellViewModel"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="using:DefaultEngine.Editor.Api.Controls.Behaviors"
    xmlns:converters="using:DefaultEngine.Editor.Internal.Plugins.ShellPlugin.Converters"
    xmlns:services="using:DefaultEngine.Editor.Api.Services"
    xmlns:templates="using:DefaultEngine.Editor.Api.Controls.Templates"
    xmlns:viewmodels="using:DefaultEngine.Editor.Internal.Plugins.ShellPlugin.ViewModels"
    xmlns:views="using:DefaultEngine.Editor.Internal.Plugins.ShellPlugin.Views"
    Margin="{Binding $parent[Window].OffScreenMargin}"
    BorderBrush="{DynamicResource SystemAccentColor}"
    BorderThickness="1">

    <Border.Styles>

        <Style Selector=":is(InputElement).Blurable[IsEnabled=True]">

            <Style.Animations>

                <Animation FillMode="Forward" Duration="0:0:0.3">

                    <KeyFrame Cue="100%">
                        <Setter Property="Effect" Value="blur(0)" />
                    </KeyFrame>

                </Animation>

            </Style.Animations>

        </Style>

        <Style Selector=":is(InputElement).Blurable[IsEnabled=False]">

            <Style.Animations>

                <Animation FillMode="Forward" Duration="0:0:0.3">

                    <KeyFrame Cue="100%">
                        <Setter Property="Effect" Value="blur(1)" />
                    </KeyFrame>

                </Animation>

            </Style.Animations>

        </Style>

    </Border.Styles>

    <DockPanel>

        <Grid DockPanel.Dock="Top">

            <Rectangle Fill="{DynamicResource SystemAccentColorLight3}" IsHitTestVisible="False" />

            <DockPanel Margin="0,0,200,0" HorizontalAlignment="Left">

                <Image
                    Width="32"
                    Height="32"
                    VerticalAlignment="Top"
                    DockPanel.Dock="Left"
                    Source="/Resources/Images/DefaultLogo.png" />

                <Menu
                    x:Name="TopMenu"
                    Height="NaN"
                    Classes="Blurable"
                    IsEnabled="{Binding !#ContentDialogHost.IsVisible}"
                    ItemsSource="{Binding Menus}">

                    <Menu.ItemsPanel>

                        <ItemsPanelTemplate>

                            <WrapPanel VerticalAlignment="Center" />

                        </ItemsPanelTemplate>

                    </Menu.ItemsPanel>

                    <Menu.Styles>

                        <Style x:DataType="viewmodels:MenuViewModel" Selector="Menu MenuItem">

                            <Setter Property="Icon" Value="{Binding Icon, Converter={x:Static converters:ObjectConverters.ToKnownIconType}}" />
                            <Setter Property="Header" Value="{Binding Header}" />
                            <Setter Property="Command" Value="{Binding Command}" />
                            <Setter Property="InputGesture" Value="{Binding HotKey}" />
                            <Setter Property="ItemsSource" Value="{Binding SubMenus}" />

                        </Style>

                    </Menu.Styles>

                    <Menu.DataTemplates>

                        <templates:DataTemplateInclude Source="avares://DefaultEngine.Editor/Internal/Plugins/ShellPlugin/Resources/KnownIconTypeDataTemplates.axaml" />

                    </Menu.DataTemplates>

                </Menu>

            </DockPanel>

        </Grid>

        <Grid>
            <Grid
                x:Name="MainContentHost"
                Margin="5"
                Classes="Blurable"
                IsEnabled="{Binding !#ContentDialogHost.IsVisible}">

                <StackPanel Orientation="Vertical">

                    <TextBlock Text="Welcome to Avalonia!" />

                    <TextBox />

                </StackPanel>

            </Grid>

            <Border
                x:Name="ContentDialogHost"
                MaxWidth="{Binding #MainContentHost.Bounds.Width}"
                MaxHeight="{Binding #MainContentHost.Bounds.Height}"
                behaviors:ContentDialog.IsFullScreen="{Binding #ContentDialogPresenter.Child.(behaviors:ContentDialog.IsFullScreen)}"
                Background="White"
                BorderBrush="{DynamicResource SystemAccentColor}"
                IsVisible="{Binding !!$self.Opacity}"
                Opacity="0"
                PropertyChanged="OnContentDialogPropertyChanged">

                <Border.Styles>

                    <Style Selector="Border#ContentDialogHost">

                        <Setter Property="HorizontalAlignment" Value="Center" />
                        <Setter Property="VerticalAlignment" Value="Center" />
                        <Setter Property="CornerRadius" Value="5" />
                        <Setter Property="BorderThickness" Value="1" />
                        <Setter Property="BoxShadow" Value="0 0 10 5 DarkGray" />
                        <Setter Property="Margin" Value="5" />
                        <Setter Property="Padding" Value="5" />

                        <Setter Property="Transitions">
                            <Transitions>
                                <DoubleTransition
                                    Easing="SineEaseIn"
                                    Property="Opacity"
                                    Duration="0:0:0.3" />
                            </Transitions>
                        </Setter>

                        <Style Selector="^[(behaviors|ContentDialog.IsFullScreen)=True]">

                            <Setter Property="HorizontalAlignment" Value="Stretch" />
                            <Setter Property="VerticalAlignment" Value="Stretch" />
                            <Setter Property="CornerRadius" Value="0" />
                            <Setter Property="BorderThickness" Value="0" />
                            <Setter Property="BoxShadow" Value="0 0 0 0 DarkGray" />
                            <Setter Property="Margin" Value="0" />
                            <Setter Property="Padding" Value="0" />

                        </Style>

                    </Style>


                </Border.Styles>

                <DockPanel>

                    <UniformGrid
                        Margin="0,5,0,0"
                        HorizontalAlignment="Right"
                        ColumnSpacing="5"
                        DockPanel.Dock="Bottom"
                        Rows="1">

                        <Button
                            HorizontalAlignment="Stretch"
                            Command="{Binding $parent[views:ShellView].OnContentDialogReturn}"
                            CommandParameter="{x:Static services:IContentDialogService+DialogResult.Primary}"
                            Content="{Binding #ContentDialogPresenter.Child.(behaviors:ContentDialog.PrimaryContent)}"
                            IsEnabled="{Binding #ContentDialogPresenter.Child.(behaviors:ContentDialog.CanReturnPrimary)}"
                            IsVisible="{Binding $self.Content, Converter={x:Static ObjectConverters.IsNotNull}}" />

                        <Button
                            HorizontalAlignment="Stretch"
                            Command="{Binding $parent[views:ShellView].OnContentDialogReturn}"
                            CommandParameter="{x:Static services:IContentDialogService+DialogResult.Secondary}"
                            Content="{Binding #ContentDialogPresenter.Child.(behaviors:ContentDialog.SecondaryContent)}"
                            IsEnabled="{Binding #ContentDialogPresenter.Child.(behaviors:ContentDialog.CanReturnSecondary)}"
                            IsVisible="{Binding $self.Content, Converter={x:Static ObjectConverters.IsNotNull}}" />

                        <Button
                            HorizontalAlignment="Stretch"
                            Command="{Binding $parent[views:ShellView].OnContentDialogReturn}"
                            CommandParameter="{x:Static services:IContentDialogService+DialogResult.None}"
                            Content="{Binding #ContentDialogPresenter.Child.(behaviors:ContentDialog.NoneContent)}"
                            IsVisible="{Binding $self.Content, Converter={x:Static ObjectConverters.IsNotNull}}" />

                    </UniformGrid>

                    <ContentPresenter x:Name="ContentDialogPresenter" Content="{Binding #ContentDialogHost.Tag}" />

                </DockPanel>

            </Border>

        </Grid>

    </DockPanel>

</Border>
