using System;
using System.Collections.Generic;
using System.Linq;
using Avalonia;
using DefaultEngine.Editor.Api;

namespace DefaultEngine.Editor.Internal.Plugins.ShellPlugin.ViewModels;

internal sealed class ShellViewModel
{
    private readonly List<MenuViewModel> _menus;

    public IReadOnlyCollection<MenuViewModel> Menus => _menus;

    public ShellViewModel(Application application, IEnumerable<IMenu> menus)
    {
        _menus = [];

        foreach (IMenu menu in menus)
        {
            MenuViewModel? parentVM = null;

            foreach (string part in menu.Path.Take(menu.Path.Count - 1))
            {
                MenuViewModel? subMenu = (parentVM?.SubMenus ?? _menus).FirstOrDefault(menu => menu.SubMenus is { } && string.Equals(menu.Header, part, StringComparison.OrdinalIgnoreCase));

                if (subMenu is null)
                {
                    subMenu = new MenuViewModel(part);

                    (parentVM is null ? (Action<MenuViewModel>)_menus.Add : parentVM.Add)(subMenu);
                }

                parentVM = subMenu;
            }

            MenuViewModel? duplicate =
                menu is not IBaseCommandMenu
                ? null
                : (parentVM?.SubMenus ?? _menus).FirstOrDefault(duplicate => duplicate.IsAutoGenerated && string.Equals(menu.Path[^1], duplicate.Header, StringComparison.OrdinalIgnoreCase));
            MenuViewModel menuVM = new(application, menu, duplicate);

            if (duplicate != null)
            {
                (parentVM is null ? (Func<MenuViewModel, bool>)_menus.Remove : parentVM.Remove)(duplicate);
            }

            (parentVM is null ? (Action<MenuViewModel>)_menus.Add : parentVM.Add)(menuVM);
        }

        _menus.Sort(MenuViewModel.Compare);
    }
}
